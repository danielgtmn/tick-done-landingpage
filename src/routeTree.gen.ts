/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as SupportRouteImport } from "./routes/support";
import { Route as ImpressumRouteImport } from "./routes/impressum";
import { Route as EncryptionRouteImport } from "./routes/encryption";
import { Route as DatenschutzRouteImport } from "./routes/datenschutz";
import { Route as AgbRouteImport } from "./routes/agb";
import { Route as IndexRouteImport } from "./routes/index";

const SupportRoute = SupportRouteImport.update({
  id: "/support",
  path: "/support",
  getParentRoute: () => rootRouteImport,
} as any);
const ImpressumRoute = ImpressumRouteImport.update({
  id: "/impressum",
  path: "/impressum",
  getParentRoute: () => rootRouteImport,
} as any);
const EncryptionRoute = EncryptionRouteImport.update({
  id: "/encryption",
  path: "/encryption",
  getParentRoute: () => rootRouteImport,
} as any);
const DatenschutzRoute = DatenschutzRouteImport.update({
  id: "/datenschutz",
  path: "/datenschutz",
  getParentRoute: () => rootRouteImport,
} as any);
const AgbRoute = AgbRouteImport.update({
  id: "/agb",
  path: "/agb",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/agb": typeof AgbRoute;
  "/datenschutz": typeof DatenschutzRoute;
  "/encryption": typeof EncryptionRoute;
  "/impressum": typeof ImpressumRoute;
  "/support": typeof SupportRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/agb": typeof AgbRoute;
  "/datenschutz": typeof DatenschutzRoute;
  "/encryption": typeof EncryptionRoute;
  "/impressum": typeof ImpressumRoute;
  "/support": typeof SupportRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/agb": typeof AgbRoute;
  "/datenschutz": typeof DatenschutzRoute;
  "/encryption": typeof EncryptionRoute;
  "/impressum": typeof ImpressumRoute;
  "/support": typeof SupportRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/agb"
    | "/datenschutz"
    | "/encryption"
    | "/impressum"
    | "/support";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/agb" | "/datenschutz" | "/encryption" | "/impressum" | "/support";
  id:
    | "__root__"
    | "/"
    | "/agb"
    | "/datenschutz"
    | "/encryption"
    | "/impressum"
    | "/support";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AgbRoute: typeof AgbRoute;
  DatenschutzRoute: typeof DatenschutzRoute;
  EncryptionRoute: typeof EncryptionRoute;
  ImpressumRoute: typeof ImpressumRoute;
  SupportRoute: typeof SupportRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/support": {
      id: "/support";
      path: "/support";
      fullPath: "/support";
      preLoaderRoute: typeof SupportRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/impressum": {
      id: "/impressum";
      path: "/impressum";
      fullPath: "/impressum";
      preLoaderRoute: typeof ImpressumRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/encryption": {
      id: "/encryption";
      path: "/encryption";
      fullPath: "/encryption";
      preLoaderRoute: typeof EncryptionRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/datenschutz": {
      id: "/datenschutz";
      path: "/datenschutz";
      fullPath: "/datenschutz";
      preLoaderRoute: typeof DatenschutzRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/agb": {
      id: "/agb";
      path: "/agb";
      fullPath: "/agb";
      preLoaderRoute: typeof AgbRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgbRoute: AgbRoute,
  DatenschutzRoute: DatenschutzRoute,
  EncryptionRoute: EncryptionRoute,
  ImpressumRoute: ImpressumRoute,
  SupportRoute: SupportRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
